#!/usr/bin/env bash


log_info() {
  printf "\x1b[36m[info]\x1b[0m: ${1}\n"
}

log_warn() {
  printf "\x1b[33m[warn]\x1b[0m: ${1}\n"
}

log_error() {
  printf "\x1b[31m[error]\x1b[0m: ${1}\n"
}

print_help() {
  printf "Usage: $0 [modifier] [option]

Modifier:
  -f  Force       Forces operations to proceed, ignoring warnings
  -s  Silent      Prevents output from being printed

Options:
  -h  Help        Displays help message
  -i  Install     Installs symlinks for various files in `$DOTFILE_PATH`
  -u  Uninstall   Uninstalls created symlinks\n"
}

create_symlink() {
  local src="$1"
  local dest="$2"

  if [[ "$opt_silent" != "true" ]]; then
    log_info "linking \'${src}\' -> \'${dest}\'"
  fi

  if [[ -e "$dest" ]]; then
    if [[ "$opt_force" == "true" ]]; then
      destroy_symlink "$dest"
    else
      if [[ "$opt_silent" != "true" ]]; then
        log_warn "file \'${dest}\' already exists"
      fi

      return
    fi
  else
    mkdir $(dirname "${dest}")
  fi

  # remove symlink on error
  if ! ln -s "$src" "$dest" &>/dev/null; then
    if [[ "$opt_silent" != "true" ]]; then
      log_error "failed to link \'${src}\' to \'${dest}\'"
    fi

    destroy_symlink "$dest"
    exit 1
  fi
}

destroy_symlink() {
  dest="$1"

  if [[ "$opt_silent" != "true" ]]; then
    log_info "deleting \'${dest}\'"
  fi

  rm -rf "$dest"
}

install_dotfiles() {
  if [[ "$opt_silent" != "true" ]]; then
    log_info "installing dotfiles"
  fi

  # create symlinks for each *.sym file in the repository in the form of
  # ~/.<dotfile>
  for src in $(ls ${dotfile_path}/**/*.sym); do
    dest="${HOME}/.$(basename "${src%.*}")"
    create_symlink "$src" "$dest" 
  done
}

uninstall_dotfiles() {
  if [[ "$opt_silent" != "true" ]]; then
    log_info "uninstalling dotfiles"
  fi

  # deleting createed symlinks for each *.sym file in the repository in the form of
  # ~/.<dotfile>
  for src in $(ls ${dotfile_path}/**/*.sym); do
    dest="${HOME}/.$(basename "${src%.*}")"
    destroy_symlink "$dest"
  done
}

install_config_files() {
  if [[ "$opt_silent" != "true" ]]; then
    log_info "installing config files"
  fi

  for dir in $(ls ${dotfile_path}/config); do
    src="${dotfile_path}/config/${dir}"
    if [ -d "$src" ]; then
      dest="${HOME}/.config/${dir}"
      create_symlink "$src" "$dest" 
    fi
  done
}

uninstall_config_files() {
  if [[ "$opt_silent" != "true" ]]; then
    log_info "uninstalling config files"
  fi

  for dir in $(ls ${dotfile_path}/config); do
    if [ -d "${dotfile_path}/config/${dir}" ]; then
      dest="${HOME}/.config/${dir}"
      destroy_symlink "$dest" 
    fi
  done
}

remove_env_variables() {
  [[ -z "$DOTFILE_PATH" ]] && return || unset DOTFILE_PATH
}

dotfile_path="$(cd -- "$(dirname "$0")/.." >/dev/null 2>&1; pwd -P)"
cd "$dotfile_path"

while getopts fhisu flag; do
  case "${flag}" in
    f)
      opt_force=true
      ;;
    h)
      print_help
      exit 0
      ;;
    i)
      install_dotfiles
      install_config_files
      ;;
    s)
      opt_silent=true
      ;;
    u)
      uninstall_dotfiles
      uninstall_config_files
      remove_env_variables
      ;;
    *)
      print_help
      exit 1
      ;;
  esac
done


exit 0
